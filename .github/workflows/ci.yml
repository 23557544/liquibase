name: Build Liquibase OSS

on:
  pull_request_target:
    types:
      - opened
      - reopened
      - synchronize

  push:
    branches:
      - master
      - main
      - github-action-*
      - test-sonar-scan

jobs:
  check_build_safety:
    uses: ./.github/workflows/check_build_safety.yml

  setup:
    needs: check_build_safety
    runs-on: ubuntu-latest
    outputs:
#      proBranchName: ${{ steps.find-branches.outputs.proBranchName }}
#      proBranchSha: ${{ steps.find-branches.outputs.proBranchSha }}
      thisSha: ${{ steps.find-branches.outputs.thisSha }}
      thisBranchName: ${{ steps.find-branches.outputs.thisBranchName }}
      thisBranchFileName: ${{ steps.find-branches.outputs.thisBranchFileName }}
      thisRepositoryName: ${{ steps.find-branches.outputs.thisRepositoryName }}
      thisRepositoryOwner: ${{ steps.find-branches.outputs.thisRepositoryName }}
      standAlonePR: ${{ steps.find-branches.outputs.standAlonePR }}
#      stablePro: ${{ steps.find-branches.outputs.stablePro }}
#      setupSuccessful: "true"
    steps:
      - name: Failsafe
        uses: actions/github-script@v6
        with:
          script: |
            if (${{ github.run_attempt }} % 5 == 0) {
              core.setFailed("Fail every 5 run attempts to catch accidental infinite loops");
            }

      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.after}}

      - name: Find corresponding branches
        id: find-branches
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const helper = require('./.github/util/workflow-helper.js')({github, context});

            core.setOutput("thisSha", helper.getCurrentSha());
            core.setOutput("thisBranchName", helper.getCurrentBranch());
            core.setOutput("thisBranchFileName", helper.getCurrentBranch().replace(/[^a-zA-Z0-9\-_]/g, "_"));
            core.setOutput("thisRepoName", helper.getRepositoryName());
            core.setOutput("thisRepoOwner", helper.getRepositoryOwner());

            let proStatusMessage = "success";
            let proFailed = false;

            let branch = await helper.findMatchingBranch("liquibase", "liquibase-pro");
            //count as not a stand-alone PR for branch builds on master/main, even though there are no PRs
            if (helper.getCurrentBranch() == 'master' || helper.getCurrentBranch() == 'main' && branch.pullRequestId) {
              core.setOutput("standAlonePR", helper.getCurrentBranch() !== branch.name);
            } else {
              core.setOutput("standAlonePR", true);
            }

            if (!branch.lastSuccessfulRunNumber) {
              proFailed = true;
              proStatusMessage = "Matching pro branch has never passed. Falling back to master"
              branch = await helper.findMatchingBranch("liquibase", "liquibase-pro", ["main", "master"])
            }
            # core.setOutput("proBranchName", branch.name);
            # core.setOutput("proBranchSha", branch.sha);

            if (!proFailed) {
              if (!branch.workflowId) {
                proStatusMessage = "does not have a ran workflow";
                proFailed = true
              } else if ( branch.runStatus != "completed") {
                proStatusMessage = "build is "+ branch.runStatus;
                proFailed = true
              } else if ( branch.runConclusion != "success") {
                proStatusMessage = "build conclusion was "+branch.runConclusion;
                proFailed = true
              }
            }

            statusMessage = "liquibase/liquibase-pro:"+branch.name+"@" + branch.sha.substring(0, 7) + " " + proStatusMessage;
            console.log("Pro failed?" + proFailed + ": "+statusMessage);

            github.rest.repos.createCommitStatus({
              "owner": "liquibase",
              "repo": "liquibase",
              "sha": helper.getCurrentSha(),
              "state": (proFailed ? "failure" : "success"),
              "target_url": branch.runHtmlUrl,
              "context": "Stable Liquibase Pro",
              "description": statusMessage
            });

            # core.setOutput("stablePro", !proFailed);

      - name: Upload Event File
        uses: actions/upload-artifact@v3
        with:
          name: Event File
          path: ${{ github.event_path }}

#  setup:
#    needs: check_build_safety
#    uses: ./.github/workflows/setup.yml
#    with:
#      lb_flavor: "oss"
#    secrets:
#      bot_token: ${{secrets.BOT_TOKEN}}

  build:
    needs: setup
    uses: ./.github/workflows/oss-build.yml
    with:
      lb_flavor: "oss"
      thisSha: ${{ needs.setup.outputs.thisSha }}
      thisBranchName: ${{ needs.setup.outputs.thisBranchName }}
      thisBranchFileName: ${{ needs.setup.outputs.thisBranchFileName }}
      thisRepositoryName: ${{ needs.setup.outputs.thisRepositoryName }}
      thisRepositoryOwner: ${{ needs.setup.outputs.thisRepositoryOwner }}

  sonar:
    needs: build
    uses: ./.github/workflows/oss-sonar.yml
    with:
      lb_flavor: "oss"
    secrets:
      sonar_token: ${{secrets.SONAR_TOKEN}}

  integration-test:
    needs: build
    uses: ./.github/workflows/oss-test.yml
    with:
      lb_flavor: "oss"
    secrets:
      artifactory_user: ${{ secrets.ARTIFACTORY_USER }}
      artifactory_token: ${{ secrets.ARTIFACTORY_TOKEN }}

  package:
    needs: [setup, build]
    uses: ./.github/workflows/oss-package.yml
    with:
      lb_flavor: "oss"
    secrets:
      bot_token: ${{secrets.BOT_TOKEN}}
      gpg_private_key: ${{ secrets.GPG_SECRET }}
      gpg_password: ${{ secrets.GPG_PASSPHRASE }}
      install4j_lic: ${{secrets.INSTALL4J_LICENSE}}
      install4j_apple_key: ${{ secrets.INSTALL4J_APPLE_KEY }}
      install4j_apple_key_password: ${{ secrets.INSTALL4J_APPLE_KEY_PASSWORD }}
      install4j_apple_id: ${{ secrets.INSTALL4J_APPLE_ID }}
      install4j_apple_id_password: ${{ secrets.INSTALL4J_APPLE_ID_PASSWORD }}
      install4j_win_key: ${{ secrets.INSTALL4J_WINDOWS_KEY }}
      install4j_win_key_password: ${{ secrets.INSTALL4J_WINDOWS_KEY_PASSWORD }}

  finish:
    needs: [setup, build, integration-test, package, sonar]
    uses: ./.github/workflows/oss-finish.yml
    with:
      lb_flavor: oss
    secrets:
      bot_token: ${{secrets.BOT_TOKEN}}
