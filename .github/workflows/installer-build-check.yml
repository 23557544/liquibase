name: Build and Test

# Job will run nightly at 03:05 EDT / 02:05 CDT
# Time below is UTC
on:
  schedule:
    - cron: "5 7 * * *"
  workflow_dispatch:
  push:
    branches:
      - gha-scheduled-*

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    outputs:
      proBranchName: ${{ steps.find-branches.outputs.proBranchName }}
      thisSha: ${{ steps.find-branches.outputs.thisSha }}
      thisBranchName: ${{ steps.find-branches.outputs.thisBranchName }}
      thisBranchFileName: ${{ steps.find-branches.outputs.thisBranchFileName }}
      thisRepositoryName: ${{ steps.find-branches.outputs.thisRepositoryName }}
      thisRepositoryOwner: ${{ steps.find-branches.outputs.thisRepositoryName }}
      setupSuccessful: "true"
    steps:
      - uses: actions/checkout@v3

      - name: Find corresponding branches
        id: find-branches
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.BOT_TOKEN }}
          script: |
            const helper = require('./.github/util/workflow-helper.js')({github, context});
            core.setOutput("thisSha", helper.getCurrentSha());
            core.setOutput("thisBranchName", helper.getCurrentBranch());
            core.setOutput("thisBranchFileName", helper.getCurrentBranch().replace(/[^a-zA-Z0-9\-_]/g, "_"));
            core.setOutput("thisRepoName", helper.getRepositoryName());
            core.setOutput("thisRepoOwner", helper.getRepositoryOwner());
            core.setOutput("proBranchName", "Master");

      - name: Upload Event File
        uses: actions/upload-artifact@v3
        with:
          name: Event File
          path: ${{ github.event_path }}

  build-oss:
    name: Build OSS & Test (Java ${{ matrix.java }} ${{ matrix.os }})
    needs: setup
    strategy:
      fail-fast: false
      matrix:
        os: [ ubuntu-latest, macos-latest, windows-2019 ]
        java: [ 8, 11, 17, 18 ]
        exclude:
          # exclude non-java 8 on macos and windows builds
          - os: macos-latest
            java: 11
          - os: windows-2019
            java: 11
          - os: macos-latest
            java: 17
          - os: windows-2019
            java: 17
          - os: macos-latest
            java: 18
          - os: windows-2019
            java: 18
    runs-on: ${{ matrix.os }}
    env:
      OS_TYPE: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.after}}
      - name: Built Code Cache
        if: ${{ matrix.java == 8}}
        uses: actions/cache@v3.0.4
        with:
          key: built-code-${{ github.run_number }}-${{ github.run_attempt }}
          path: ./**/target
      - name: Set up JDK ${{ matrix.java }}
        uses: actions/setup-java@v3
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'
          cache: 'maven'
      - name: Build & Test
        run: |
          mvn -B "-Dbuild.repository.owner=${{ needs.setup.outputs.thisRepositoryOwner }}" "-Dbuild.repository.name=${{ needs.setup.outputs.thisRepositoryName }}" "-Dbuild.branch=${{ needs.setup.outputs.thisBranchName }}" "-Dbuild.number=${{ github.run_number }}" "-Dbuild.commit=${{ needs.setup.outputs.thisSha }}" "-DtrimStackTrace=false" -pl '!liquibase-dist' clean test package surefire-report:report
      - name: Remove Original Jars for *nix
        if: env.OS_TYPE != 'windows-2019'
        run: |
          find . -name original-*.jar -exec rm {} \;


      - name: Archive Test Results
        if: ${{ always() }}
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-test-results-jdk${{ matrix.java }}
          path: |
            ./**/target/surefire-reports
            ./**/target/site

      - name: Archive Modules
        if: ${{ matrix.java == 8 && matrix.os == 'ubuntu-latest'}}
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-modules
          path: |
            */target/*-0-SNAPSHOT.jar

  package:
    name: Package Artifacts
    runs-on: macos-latest
    needs: [ setup, build-oss ]
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha || github.event.after}}

      - name: Built Code Cache
        uses: actions/cache@v3.0.4
        with:
          key: built-code-${{ github.run_number }}-${{ github.run_attempt }}
          path: ./**/target

      ##Cache based on install4j file, since changes to JVM is seen in there. If install4j version changes without changing the file, change the prefix letter before hashFiles to force a new cache
      - name: Install4j Cache
        uses: actions/cache@v3.0.4
        with:
          key: install4j-A${{ hashFiles('liquibase-dist/src/main/install4j/liquibase.install4j') }}
          path: ~/.install4j8/**

      - name: Set up JDK 8
        uses: actions/setup-java@v3
        with:
          java-version: '8'
          distribution: 'temurin'
          gpg-private-key: ${{ secrets.GPG_SECRET }}
          gpg-passphrase: GPG_PASSPHRASE
          cache: 'maven'
        env:
          GPG_PASSWORD: ${{ secrets.GPG_PASSPHRASE }}

      - name: Download liquibase-pro
        uses: liquibase/action-download-artifact@v2-liquibase
        with:
          github_token: ${{ secrets.BOT_TOKEN }}
          workflow: build.yml
          workflow_conclusion: success
          branch: "master"
          name: liquibase-pro-modules
          path: download/liquibase-pro
          repo: liquibase/liquibase-pro

      - name: Install Built Modules
        run: |
          (find . -name *-SNAPSHOT.jar -exec mvn -B org.apache.maven.plugins:maven-install-plugin:3.0.0-M1:install-file -Dfile={} \;)
          (find . -name *-SNAPSHOT-sources.jar -exec mvn -B org.apache.maven.plugins:maven-install-plugin:3.0.0-M1:install-file -Dclassifier=sources -Dfile={} \;)
          mvn -B org.apache.maven.plugins:maven-install-plugin:3.0.0-M1:install-file -Dfile=download/liquibase-pro/liquibase-pro-0-SNAPSHOT.jar

      - name: Build & Sign Artifacts
        env:
          INSTALL4J_LICENSE: ${{ secrets.INSTALL4J_LICENSE }}
          INSTALL4J_APPLE_KEY: ${{ secrets.INSTALL4J_APPLE_KEY }}
          INSTALL4J_APPLE_KEY_PASSWORD: ${{ secrets.INSTALL4J_APPLE_KEY_PASSWORD }}
          INSTALL4J_APPLE_ID: ${{ secrets.INSTALL4J_APPLE_ID }}
          INSTALL4J_APPLE_ID_PASSWORD: ${{ secrets.INSTALL4J_APPLE_ID_PASSWORD }}
          INSTALL4J_WINDOWS_KEY: ${{ secrets.INSTALL4J_WINDOWS_KEY }}
          INSTALL4J_WINDOWS_KEY_PASSWORD: ${{ secrets.INSTALL4J_WINDOWS_KEY_PASSWORD }}
          GPG_PASSWORD: ${{ secrets.GPG_PASSPHRASE }}
        run: |
          ## save install4j code signing keys
          mkdir -p liquibase-dist/target/keys
          echo "Saving apple key"
          echo "$INSTALL4J_APPLE_KEY" | base64 -d > liquibase-dist/target/keys/datical_apple.p12

          echo "Saving windows key"
          echo "$INSTALL4J_WINDOWS_KEY" | base64 -d > liquibase-dist/target/keys/datical_windows.pfx
          mvn -B -pl liquibase-dist -P liquibase-pro source:jar package

          ## extract tar content for other artifacts
          mkdir -p liquibase-dist/target/liquibase-0-SNAPSHOT
          (cd liquibase-dist/target/liquibase-0-SNAPSHOT && tar xfz ../liquibase-0-SNAPSHOT.tar.gz)

          ##create zip file from tar content
          (cd liquibase-dist/target/liquibase-0-SNAPSHOT && zip -r ../liquibase-0-SNAPSHOT.zip *)

          ##create installer - run here nightly job and as part of release workflow
          (cd liquibase-dist && ${{ github.workspace }}/.github/util/package-install4j.sh 0-SNAPSHOT)

          find . -name original-*.jar -exec rm {} \;

          mkdir -p artifacts
          cp liquibase-dist/target/liquibase-0-SNAPSHOT.tar.gz artifacts
          cp liquibase-dist/target/liquibase-0-SNAPSHOT.zip artifacts
          cp liquibase-dist/target/liquibase-0-SNAPSHOT.jar artifacts
          cp liquibase-dist/target/liquibase-0-SNAPSHOT-sources.jar artifacts
          cp liquibase-dist/target/liquibase-*-installer-* artifacts

          cp liquibase-maven-plugin/target/liquibase-maven-plugin-0-SNAPSHOT.jar artifacts
          cp liquibase-maven-plugin/target/liquibase-maven-plugin-0-SNAPSHOT-sources.jar artifacts
          cp liquibase-maven-plugin/target/liquibase-maven-plugin-0-SNAPSHOT-javadoc.jar artifacts

          cp liquibase-cdi/target/liquibase-cdi-0-SNAPSHOT.jar artifacts
          cp liquibase-cdi/target/liquibase-cdi-0-SNAPSHOT-sources.jar artifacts
          cp liquibase-cdi/target/liquibase-cdi-0-SNAPSHOT-javadoc.jar artifacts

          cp target/liquibase-0-SNAPSHOT-javadoc.jar artifacts

          .github/util/sign-artifacts.sh artifacts

          ##prepare branch-named convenience artifacts directories
          mkdir artifacts-named
          cp liquibase-dist/target/liquibase-0-SNAPSHOT.tar.gz artifacts-named/liquibase-${{ needs.setup.outputs.thisBranchFileName }}.tar.gz
          cp liquibase-dist/target/liquibase-0-SNAPSHOT.jar artifacts-named/liquibase-${{ needs.setup.outputs.thisBranchFileName }}.jar
          cp liquibase-maven-plugin/target/liquibase-maven-plugin-0-SNAPSHOT.jar artifacts-named/liquibase-maven-plugin-${{ needs.setup.outputs.thisBranchFileName }}.jar
          cp liquibase-cdi/target/liquibase-cdi-0-SNAPSHOT.jar artifacts-named/liquibase-cdi-${{ needs.setup.outputs.thisBranchFileName }}.jar
          cp liquibase-extension-testing/target/liquibase-extension-testing-0-SNAPSHOT.jar artifacts-named/liquibase-extension-testing-${{ needs.setup.outputs.thisBranchFileName }}.jar
          cp liquibase-extension-testing/target/liquibase-extension-testing-0-SNAPSHOT-deps.jar artifacts-named/liquibase-extension-testing-${{ needs.setup.outputs.thisBranchFileName }}-deps.jar

      - name: Archive Packages
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-artifacts
          path: artifacts/*

      - name: Archive Convenience Zip
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-zip-${{ needs.setup.outputs.thisBranchFileName }}
          path: liquibase-dist/target/liquibase-0-SNAPSHOT/*

      - name: Archive Convenience Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: liquibase-artifacts-${{ needs.setup.outputs.thisBranchFileName }}
          path: artifacts-named/*


