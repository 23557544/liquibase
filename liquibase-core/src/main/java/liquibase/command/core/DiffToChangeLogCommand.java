package liquibase.command.core;

import liquibase.Scope;
import liquibase.command.CommandArgumentDefinition;
import liquibase.command.CommandScope;
import liquibase.database.Database;
import liquibase.database.ObjectQuotingStrategy;
import liquibase.diff.DiffResult;
import liquibase.diff.output.DiffOutputControl;
import liquibase.diff.output.changelog.DiffToChangeLog;
import liquibase.util.StringUtil;

import java.io.PrintStream;

public class DiffToChangeLogCommand extends DiffCommand {

    public static final CommandArgumentDefinition<String> CHANGELOG_FILENAME_ARG;
    public static final CommandArgumentDefinition<DiffOutputControl> DIFF_OUTPUT_CONTROL_ARG;

    static {
        final CommandArgumentDefinition.Builder builder = new CommandArgumentDefinition.Builder(DiffToChangeLogCommand.class);

        CHANGELOG_FILENAME_ARG = builder.define("changeLogFile", String.class).required().build();
        DIFF_OUTPUT_CONTROL_ARG = builder.define("diffOutputControl", DiffOutputControl.class).required().build();
    }


    @Override
    public String[] getName() {
        return new String[]{"diffChangeLog"};
    }

    @Override
    public void run(CommandScope commandScope) throws Exception {
        Database referenceDatabase = REFERENCE_DATABASE_ARG.getValue(commandScope);
        String changeLogFile = CHANGELOG_FILENAME_ARG.getValue(commandScope);

        SnapshotCommand.logUnsupportedDatabase(referenceDatabase, this.getClass());

        DiffResult diffResult = createDiffResult(commandScope);

        PrintStream outputStream = OUTPUT_STREAM_ARG.getValue(commandScope);
        if (outputStream == null) {
            outputStream = System.out;
        }

        outputBestPracticeMessage();

        ObjectQuotingStrategy originalStrategy = referenceDatabase.getObjectQuotingStrategy();
        try {
            referenceDatabase.setObjectQuotingStrategy(ObjectQuotingStrategy.QUOTE_ALL_OBJECTS);
            if (StringUtil.trimToNull(changeLogFile) == null) {
                createDiffToChangeLogObject(diffResult, commandScope).print(outputStream);
            } else {
                createDiffToChangeLogObject(diffResult, commandScope).print(changeLogFile);
            }
        }
        finally {
            referenceDatabase.setObjectQuotingStrategy(originalStrategy);
        }
    }

    protected DiffToChangeLog createDiffToChangeLogObject(DiffResult diffResult, CommandScope commandScope) {
        return new DiffToChangeLog(diffResult, DIFF_OUTPUT_CONTROL_ARG.getValue(commandScope));
    }


    protected void outputBestPracticeMessage() {
        Scope.getCurrentScope().getUI().sendMessage(
           "BEST PRACTICE: The changelog generated by diffChangeLog/generateChangeLog should be " +
           "inspected for correctness and completeness before being deployed.");
    }

}
